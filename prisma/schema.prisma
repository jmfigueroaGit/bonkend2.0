generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  databases     Database[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Database {
  id          String   @id @default(cuid())
  name        String
  type        String
  credentials Json
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tables      Table[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Table {
  id         String   @id @default(cuid())
  name       String
  idType     String   // 'auto_increment', 'uuid', or 'cuid'
  databaseId String
  database   Database @relation(fields: [databaseId], references: [id], onDelete: Cascade)
  columns    Column[]
  apis       Api[]
  sourceRelationship Relationship[] @relation("SourceTable")
  targetRelationship Relationship[] @relation("TargetTable")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Column {
  id           String  @id @default(cuid())
  name         String
  dataType     String
  isNullable   Boolean @default(true)
  defaultValue String?
  tableId      String
  table        Table   @relation(fields: [tableId], references: [id], onDelete: Cascade)

  @@unique([tableId, name])
}

model Api {
  id     String @id @default(cuid())
  name   String
  method String
  path   String
  tableId String
  table   Table  @relation(fields: [tableId], references: [id], onDelete: Cascade)
}

model Relationship {
  id               String @id @default(cuid())
  name             String
  type             String // 'one-to-one', 'one-to-many', 'many-to-many'
  sourceTableId    String
  sourceTable      Table  @relation("SourceTable", fields: [sourceTableId], references: [id], onDelete: Cascade)
  targetTableId    String
  targetTable      Table  @relation("TargetTable", fields: [targetTableId], references: [id], onDelete: Cascade)
  sourceColumnName String
  targetColumnName String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}